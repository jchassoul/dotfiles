syntax on

set nocompatible
" Install vim-plug if not found
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

filetype plugin indent on

set mouse=a
set noerrorbells
set encoding=utf-8
set number relativenumber
set nohlsearch
set hidden
set wildmode=longest,list,full
set splitbelow splitright
set tabstop=4 softtabstop=4
set shiftwidth=4
set expandtab
set autoindent
set smartindent
set nowrap
set ignorecase
set smartcase
set noswapfile
set nobackup
set undodir=~/.vim/undodir
set undofile
set incsearch
set switchbuf=usetab,newtab
set guifont=Inconsolata\ Nerd\ Font\ Complete\ Mono\ 11
set noshowmode
set termguicolors
set t_Co=256
set t_ut=
set colorcolumn=80
set signcolumn=yes
highligh ColorColum ctermbg=0 guibg=lightgrey
set updatetime=50
set shortmess+=c
set completeopt=longest,menuone
set omnifunc=syntaxcomplete#Complete
set wildmenu
set lazyredraw
set showmatch

" Plugins will be downloaded under the specified directory.
call plug#begin('~/.vim/plugged')

" Declare the list of plugins.
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'vim-python/python-syntax'
Plug 'vim-utils/vim-man'
Plug 'davisdude/vim-love-docs'
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'jpalardy/vim-slime'
Plug 'hanschen/vim-ipython-cell', { 'for': 'python' }
" If you don't have nodejs and yarn
" use pre build, add 'vim-plug' to the filetype list so vim-plug can update this plugin
" see: https://github.com/iamcco/markdown-preview.nvim/issues/50
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'christoomey/vim-tmux-navigator'
Plug 'Raimondi/delimitMate'
Plug 'jremmen/vim-ripgrep'
Plug 'mbbill/undotree'
Plug 'sonph/onehalf', { 'rtp': 'vim' }
Plug 'Shougo/deoplete.nvim'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
Plug 'Shougo/denite.nvim'
Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'
Plug 'honza/vim-snippets'
Plug 'xolox/vim-misc', { 'for' : 'lua' }
Plug 'xolox/vim-lua-ftplugin', { 'for' : 'lua' }
Plug 'dense-analysis/ale'
Plug 'luochen1990/rainbow'
Plug 'ryanoasis/vim-devicons'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'edkolev/tmuxline.vim'
Plug 'vimwiki/vimwiki'
Plug 'mattn/calendar-vim'
Plug 'chrisbra/Colorizer'
Plug 'sheerun/vim-polyglot'
Plug 'ervandew/supertab'
Plug 'severin-lemaignan/vim-minimap'
Plug 'edkolev/erlang-motions.vim'
Plug 'Yggdroot/indentLine'
" List ends here. Plugins become visible to Vim after this call.

call plug#end()

set cursorline
colorscheme onehalfdark

let g:deoplete#enable_at_startup = 1

let g:lua_check_syntax = 0
let g:lua_complete_omni = 1
let g:lua_complete_dynamic = 0
let g:lua_define_completion_mappings = 0

call deoplete#custom#var('omni', 'functions', {
      \ 'lua': 'xolox#lua#omnifunc',
      \ })

call deoplete#custom#var('omni', 'input_patterns', {
      \ 'lua': '\w+|\w+[.:]\w*',
      \ })

if executable('rg')
    let g:rg_derive_root='true'
endif

set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.tar.*

let g:indentLine_setColors = 0

let g:airline_powerline_fonts = 0
let g:airline#extensions#tmuxline#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline#extensions#wordcount#filetypes = '\vasciidoc|markdown|markdown.pandoc|vimwiki|rst|tex|text'
let g:airline#extensions#wordcount#enabled = 1
let g:airline_theme='distinguished'

let g:tmuxline_preset = 'nightly_fox'

let g:python_highlight_all = 1

set laststatus=2

"let g:minimap_highlight='Comment'

let g:slime_target = "tmux"

let g:slime_default_config = {"socket_name": "default", "target_pane": "{last}"}

function! ToggleNetrw()
        let i = bufnr("$")
        let wasOpen = 0
        while (i >= 1)
            if (getbufvar(i, "&filetype") == "netrw")
                silent exe "bwipeout " . i
                let wasOpen = 1
            endif
            let i-=1
        endwhile
    if !wasOpen
        silent Lexplore
    endif
endfunction

map <F3> :call ToggleNetrw() <CR>

let g:netrw_banner=0        " disable banner
let g:netrw_winsize = 20    " width in percent
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_list_hide='\(^\|\s\s\)\zs\.\S\+'

autocmd FileType netrw set nolist

let g:vimwiki_list = [{'path': '~/vault/vimwiki/',
                      \ 'syntax': 'markdown', 'ext': '.md'}]

let g:vimwiki_global_ext = 0

map <leader>- :split<CR>
map <leader>\ :vsplit<CR>
map <leader>t :tabnew<CR>
map <leader>l :ColorToggle<CR>
map <leader>q :q<CR>
map <leader>w :w<CR>
map <leader>c :setlocal formatoptions-=cro<CR>
map <leader>C :setlocal formatoptions=cro<CR>
map <leader>s :setlocal spell! spelllang=en_us<CR>
map <leader>d :setlocal autoindent<CR>>
map <leader>D :setlocal noautoindent<CR>

let g:tmux_navigator_no_mappings = 1

" Disable tmux navigator when zooming the Vim pane
let g:tmux_navigator_disable_when_zoomed = 1

nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>

"nnoremap <silent> {Previous-Mapping} :TmuxNavigatePrevious<cr>

nnoremap <leader>/ :Rg<SPACE>
nnoremap R :%s//gI<Left><Left><Left>

nnoremap <F5> :UndotreeToggle<CR>

" Erlang
autocmd BufRead,BufNewFile *.erl,*.es.*.hrl,*.xrl,*.config setlocal expandtab noautoindent
au BufNewFile,BufRead *.erl,*.es,*.hrl,*.xrl,*.config setf erlang

augroup pandoc_syntax
    au! BufNewFile,BufFilePre,BufRead *.md set filetype=markdown.pandoc
    autocmd! FileType vimwiki set syntax=markdown.pandoc
augroup END

autocmd InsertEnter * norm zz

autocmd BufWritePre * %s/\s\+$//e

" Load all plugins now.
" Plugins need to be added to runtimepath before helptags can be generated.
packloadall
" Load all of the helptags now, after plugins have been loaded.
" All messages and errors will be ignored.
silent! helptags ALL
