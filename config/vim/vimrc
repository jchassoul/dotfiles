execute pathogen#infect()

set nocompatible
syntax on
filetype plugin indent on

set mouse=a
set noerrorbells
set encoding=utf-8
set number relativenumber
set nohlsearch
set hidden
set wildmode=longest,list,full
set splitbelow splitright
set tabstop=4 softtabstop=4
set shiftwidth=4
set expandtab
set smartindent
set nowrap
set ignorecase
set smartcase
set noswapfile
set incsearch
set switchbuf=usetab,newtab

set guifont=Inconsolata\ Nerd\ Font\ Complete\ Mono\ 11

set noshowmode
set completeopt=menuone,noinsert,noselect

set termguicolors
set t_Co=256
set t_ut=
colorscheme codedark

set colorcolumn=80
set signcolumn=yes

set runtimepath^=~/.vim/bundle/ctrlp.vim

highligh ColorColum ctermbg=0 guibg=lightgrey

set updatetime=50
set shortmess+=c

let g:snipMate = { 'snippet_version': 1 }

if executable('rg')
    let g:rg_derive_root='true'
endif

set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.tar.*

let g:ctrlp_extensions = ['smarttabs']
let g:ctrlp_smarttabs_modify_tabline = 0
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:ctrlp_use_caching = 0

let g:indentLine_setColors = 0

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline#extensions#wordcount#filetypes = '\vasciidoc|markdown|markdown.pandoc|vimwiki|rst|tex|text'
let g:airline#extensions#wordcount#enabled = 1
let g:airline_powerline_fonts = 0 
let g:airline_theme='monochrome'

let g:minimap_highlight='Comment'

function! ToggleNetrw()
        let i = bufnr("$")
        let wasOpen = 0
        while (i >= 1)
            if (getbufvar(i, "&filetype") == "netrw")
                silent exe "bwipeout " . i
                let wasOpen = 1
            endif
            let i-=1
        endwhile
    if !wasOpen
        silent Lexplore
    endif
endfunction

map <F3> :call ToggleNetrw() <CR>

let g:netrw_banner=0        " disable banner
let g:netrw_winsize = 20    " width in percent
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_list_hide='\(^\|\s\s\)\zs\.\S\+'

autocmd FileType netrw set nolist

let g:vimwiki_list = [{'path': '~/vault/vimwiki/',
                      \ 'syntax': 'markdown', 'ext': '.md'}]

let g:vimwiki_global_ext = 0

map <leader>- :split<CR>
map <leader>\ :vsplit<CR>
map <leader>t :tabnew<CR>
map <leader>l :ColorToggle<CR>
map <leader>q :q<CR>
map <leader>w :w<CR>
map <leader>c :setlocal formatoptions-=cro<CR>>
map <leader>C :setlocal formatoptions=cro<CR>
map <leader>s :setlocal spell! spelllang=en_us<CR>

nnoremap <leader>/ :Rg<SPACE>
nnoremap R :%s//gI<Left><Left><Left>

let g:ctrlp_map = '<F2>'
let g:ctrlp_cmd = 'CtrlP'

nnoremap <F4> :CtrlPSmartTabs<CR>

" Erlang
autocmd BufRead,BufNewFile *.erl,*.es.*.hrl,*.xrl,*.config setlocal expandtab noautoindent
au BufNewFile,BufRead *.erl,*.es,*.hrl,*.xrl,*.config setf erlang

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_lua_checkers = ["luacheck"]
let g:syntastic_lua_luacheck_args = "--no-unused-args"
let g:syntastic_erlang_checkers=['syntaxerl']

augroup pandoc_syntax
    au! BufNewFile,BufFilePre,BufRead *.md set filetype=markdown.pandoc
    autocmd! FileType vimwiki set syntax=markdown.pandoc
augroup END

" Load all plugins now.
" Plugins need to be added to runtimepath before helptags can be generated.
packloadall
" Load all of the helptags now, after plugins have been loaded.
" All messages and errors will be ignored.
silent! helptags ALL
